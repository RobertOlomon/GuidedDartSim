%% AnimateGreenLightProjection.m
% This script loads the lookup table (generated by GenerateLookupTable.m) 
% and animates the position of the green light in the camera view over time.
% The size of the circle representing the light is computed using the pinhole model,
% so that a sphere of radius 0.04 m projects to the appropriate circle size.
%
% The lookup table columns are: [time, u, v, pitch, distance].

clear; clc; close all;

%% Camera Intrinsics (must match those used in GenerateLookupTable.m)
imageWidth = 1280;
imageHeight = 800;
hfov = deg2rad(85);  % convert to radians
fx = (imageWidth/2) / tan(hfov/2);  % focal length in pixels (horizontal)
cx = imageWidth/2;
cy = imageHeight/2;

%% Load the Lookup Table
load('LookupTable.mat', 'lookupTable');

% Extract time, pixel coordinates (u, v), and distance
timeArray = lookupTable(:,1);
uArray = lookupTable(:,2);
vArray = lookupTable(:,3);
distanceArray = lookupTable(:,5);  % distance from camera to green light (meters)

%% Set up the figure for the camera view
figure;
% Create a blank image (black background)
hImg = imshow(zeros(imageHeight, imageWidth, 3, 'uint8'));
axis on; hold on;
title('Green Light Projection in Camera View');

% Plot a fixed marker for the image center (optional)
plot(cx, cy, 'w+', 'MarkerSize', 10, 'LineWidth', 2);

% Set axis limits to match image size
xlim([0, imageWidth]);
ylim([0, imageHeight]);
set(gca, 'YDir','reverse'); % set origin to top-left

% Initialize a variable for the circle handle (as a rectangle)
hCircle = [];

% Animate over time
numFrames = length(timeArray);
for k = 1:numFrames
    % Update the (u,v) position from the lookup table
    currentU = uArray(k);
    currentV = vArray(k);
    currentDistance = distanceArray(k);
    
    % Compute the projected radius in pixels using the pinhole model:
    % r_pixels = fx * (physical_radius / distance)
    physicalRadius = 0.04; % 0.04 m
    projectedRadius = fx * (physicalRadius / currentDistance);
    
    % Delete previous circle if it exists
    if ~isempty(hCircle) && isvalid(hCircle)
        delete(hCircle);
    end
    
    % Draw the circle using the rectangle function with curvature [1,1]
    % rectangle('Position', [x, y, width, height]) with
    % x = center_x - projectedRadius, y = center_y - projectedRadius, width = height = 2*projectedRadius
    hCircle = rectangle('Position', [currentU - projectedRadius, currentV - projectedRadius, 2*projectedRadius, 2*projectedRadius],...
                         'Curvature', [1,1], 'EdgeColor', 'g', 'LineWidth', 2);
    
    % Update title with current time and distance information
    title(sprintf('Green Light: t = %.3f s, Distance = %.2f m, r = %.2f px', timeArray(k), currentDistance, projectedRadius));
    
    drawnow;
    pause(0.01);  % Adjust pause for desired animation speed
end
